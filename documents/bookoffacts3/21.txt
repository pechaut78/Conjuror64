

C64 Basic:

TIME Tl A function that reads the internal timer of the
computer also known as the jiffy clock. â€”(EXAMPLE: PRINT TI/30-this will
display how many 1/30 second intervals have elapsed since power up)

TIME$ Tl$ A function that will return a six character
time display. (EXAMPLE: 1 Tl$ =
"000000":FOR T = 1 TO 10000: NEXT
T:PRINT Tl$-will display 000010)

USR U(SHIFTED S) A function that accesses a user callable
machine language routine. Memory locations 785 and 786 must contain the
pointers for the start of the machine language routine.

VAL V(SHIFTED A) A function that converts a string variable
to a numberic. (EXAMPLE: A$ = "55": PRINT VAL (A$)-will print a 55)

VERIFY V(SHIFTED E) A command that is used to compare a
program currently saved to tape of disk with the same program in memory.
(EXAMPLE: SAVE'TEST'^VERIFY'TEST'^-will save and verify the
program called test)

WAIT W(SHIFTED A) A statement that stops the execution of a
program until the specified condition is met. (EXAMPLE: WAIT 198,1-will
stop until any key is pressed)

Astute reads will notice a slight flaw in the above logic. For simplification 
purposes, I didn't get into the fact that you will need TWO raster interrupts 
PER SCREEN to accomplish anything useful. Why two? Because any change to the 
video mode you put into effect 3/4 of the way down the screen will have to be 
undone at the TOP of the next screen update. If you decide to make the top 3/4 
of the screen a hi-res image, and the bottom 1/4 text, you need one interrupt 
3/4 of the way down the screen to change from hi-res to text, but you need a 
SECOND one at the top of the screen to change back to hi-res from text.

So, we will now have 120 interrupts going off every second to accomplish our 
video desires, with 60 of them working a double shift, making sure the system 
interrupt code gets executed also. Remember that we are working with a specific
example. There is no reason why you couldn't split the screen into N different
video modes, and have (N+1)*60 interrupts going off per second. As long as you 
keep your code short (so your interrupts don't take too long, and have another 
interrupt occur before the current one is done - messy), it will work 
beautifully.

So far, this is all talk. Let's write a few short code segments to accomplish 
some of the feats we've just discussed.

The first we'll do is a re-hash of the one presented above. It flashes the 
border again. It does not do any mid-screen changes of video modes or anything 
fancy like that, so only 1 interrupt per screen is required (ie. 60 per second,
not 120 etc.). This program simply shows the same idea, but this time using 
video interrupts as the source rather than the CIA. You probably won't
notice a difference during execution.