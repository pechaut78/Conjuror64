Is the C64 64k ? Can I use all the 64k of ram?

What actually happens is that 16K of the ROM overlays 16K 
of RAM. The system is arranged such that you always read 
the information from the ROM and not the RAM underneath 
it. The other 4K of ROM also overlays RAM but this ROM is 
invisible to the user and the 4K of RAM is available for 
programs. 

(It is possible to switch the ROMs in and out of the me- 
mory map to gain extra RAM space. However this is not 
easy, or advisable, from BASIC and so we have not included 
this facility in this book.) 

And Smaller and Smaller and Smaller ... 

What we really have then, is a computer with 48K of RAM 
and 16K of ROM. Unfortunately, not all of this RAM is 
available to us for writing programs. This is because a further 
6K of RAM is required by BASIC and the operating system 
for storing important system information. (Pointers, tables 
etc.) 

We are now down to 42K of RAM which is available to us 
for programs, this is called the user RAM, However, there is 
more to come (or rather, go) because only 38K of the user 
RAM is available for writing BASIC programs. The other 4K 
is available to us, but it cannot be used for storing BASIC 
programs. Us main use is to store machine code routines 
(this is where the BASIC extension program in Chapter 10 
is located). 





The standard memory map of the C64
the memory map for the standard BASIC configuration 
contains 16K ROM, 6K of system RAM, 38K of BASIC user 
RAM and 4K of other user RAM. Figure l.J shows how all 
this fits into the 64K memory space available.

One of the main advantages to having a 64K RAM machine 
is that you will never have to buy add-on RAM packs just so 
you can play the latest version of Space Zappers or whatever. 
Any software produced for a Commodore 64 will run on 
your machine â€” satisfying, isn't it! 

It is possible however, to get add-on ROM packs, or cart- 
ridges, which contain specialised programs such as games, 
word processors, machine code assemblers etc. The ROM 
cartridges usually contain 8K of ROM which of course, over- 
lays 8K of user RAM. This is usually the 8K from address 
32768 decimal to 40959 decimal, i.e. the top 8K of the 
BASIC program area. 

Even with an 8K ROM cartridge fitted the standard Com- 
modore 64 has a total of 30K of RAM available for BASIC 
programs with a further 4K available for machine code work. 
Compared to many other home computers which only have 
48K or even 32K of RAM fitted as standard (some of which 
will be used by their operating systems and BASIC) the Com- 
modore 64 really does give you more memory for your 
money. 




Using PEEK and POKE on the Commodore 64 

There are 65536 memory locations on the Commodore 64 and you can PEEK values from and POKE values to most of them. (It is not possible to POKE new values into Read Only Memory areas like the BASIC interpreter at address 40960 to 49151.) 
POKEing values into most addresses is usually not particularly rewarding (the machine just "hangs"). Some special locations however, can be used to good advantage. 

exemples:

POKE 53272, 23 
switches to lower case. 

In addition:
POKE 53272, 21 
switches back to upper case.

These two POKEs can be very useful for making text based programs look much neater. 

1024 decimal is the lop left corner. To print on, say, the second space of the next line down (41 characters away from the top left corner) you should POKE 1065, 
value. 

If you like, you can use two variables X and Y to point to the screen locations for you. X must remain in the range to 39 and Y must remain in the range to 24. Any location on screen can then be calculated from 
L0CATlON=Y*40+X+1024. 




Poking to the screen on C64
When you are POKEing to the screen you also have to 
remember to POKE the appropriate character colour into 
the colour memory. (The BASIC PRINT statement does this 
for you.) 





on a C64,to put say, the A character at some X,Y location in, 
say, red:- 

P0KEY*4CH-X+1 024,1 ; POKE Y*40fX+5 5296,2 

Note, the character code for A is 1 and the colour code 
for red is 2. 




To change border and background color on C64:
Two useful screen colour locations are 53280, which 
controls the border colour, and 53281 which controls the 
screen background colour. 

For example, POKE 53280,0 : POKE 53281,0 sets the 
whole screen background to black (which we find much 
more restful!). 



clock on C64
registers at address 160 to 162 are used 
as a single 24 bit counter. The value in this super register 
is incremented automatically every l/60th of a second. This 
is the real time jiffy clock mentioned in Chapter 2. 

This clock can be used as an event timer by resetting the 
whole register to and then PEEKing the value after some 
event has occurred. (Because it takes time to PEEK the 
values the time obtained will only be approximate.)






C64 CHARACTER GRAPHICS 
The Commodore 64 has 2 completely different display modes: 
High resolution and Low resolution. This chapter will deal 
with the second of these in more detail, the other being dealt 
with in Chapter 7. 

In Low resolution, the screen is composed of 1000 charac- 
ter locations laid out as 25 lines of 40 characters. AU the 
characters that can be displayed normally on the Low resolu- 
tion screen are contained in ROM in two separate character 
sets. These two character sets are only available one at a time 
and they can be switched between in direct mode by simul- 
taneously pressing shift and the Commodore key. Character 
set 1 contains the upper case characters, the numbers, some 
special characters used within BASIC and a set of useful 
grapliics characters. This is the character set that is in use 
when the machine is first switched on. The second character 
set contains just a lower case character set and an upper case 
character set. There are two common ways to put characters 
onto the low resolution screen from within BASIC and we will 
examine them both in this chapter. 

The first of the two is the PRINT statement. Using a 
function that we shall examine in a moment, the PRINT 
statement is capable of producing some fairly impressive 
graphics and simple animation. In order to produce anima- 
tion, some facihty is needed to enable the program to control 
where on the screen the next character is to be printed. On 
the Commodore 64 this is achieved by inserting cursor move- 
ment control characters into the string that is being printed. 
The function used for this purpose is a string function called 
CHRS. 

CHRS(X) is a string function whose purpose is to return a 
single character string which is the character whose ASCII 
code (American Standard Code for Information Interchange) 
is tlie value of the expression contained in the brackets. 
In this case, the value of X. The contents of the brackets 
must be in the range to 255 or an illegal quantity error 
message will result. The standard ASCII code only contains 
128 characters numbered to 127. The first 32 are special 
control characters, most of which control printers and ter- 
minals with functions like line feed, form feed and carriage 
return. The second 32 characters contain special characters 
used in BASIC like S,( ),+,* etc. and the digits to 9, The 
third set of 32 characters contains the upper case letters and 
the fourth set contains lower case letters. On the Commodore 
64 this is slightly different. The second and third sets of 32 
characters still contain the special characters, the digits and the 
upper case letters, but there the similarity ends. The fourth 
set of 32 now contains a set of graphics characters instead of 
lower case letters and the first set of 32 characters now con- 
tains some special control codes that we are particularly 
interested in. In addition to this character codes 128 to 255 
are also available on the Commodore 64 of which the first 
32 are also of special interest. We will now take a look at a 
simple bouncing ball program and for this we will need the 
following special control codes to use in the CHRS function. 



In addition to these we will also use CHRS(1 13) which will 
print a small ball character from the graphics part of the 
character set. 







C64 SPRITE GRAPHICS 

Sprites are a fairly new development in home computers, 
so it's probably worth spending a little time finding out 
exactly what they are and what they can do. 

The simplest model for a Sprite is to think of it as a small, 
separate, high resolution screen, which can be overlaid on the 
main screen anywhere you like. An immediate advantage 
that we can see is that moving the Sprite around the main 
screen is fairly simple, it is only necessary to specify the new 
position for the Sprite screen, we don't need to worry about 
moving the individual dots which make up the shape of the 
Sprite. In addition, it is not necessary to redraw the bits of 
the main screen which were overlaid by the Sprite, because 
the Sprite never actually existed on the main screen. Wlien 
we move the Sprite the main screen remains unaltered. 

The Commodore 64's BASIC can control up to eight 
Sprites at tlie same time. Using our model of a Sprite you 
can see that, sooner or later, some of the Sprite screens are 
going to overlay each other. The Sprite graphics system 
allows us to detect these collisions between Sprites and also 
to specify how they will collide, or rather fiow they will 
overlay each other. By overlaying Sprites in a specific order 
it is possible to create some very interesting 3D effects. And 
using the collision detection facilities of Sprites enables some 
very exciting games to be implemented fairly easily. 

So, in general terms, a Sprite is a very flexible graphics 
object with a lot of built in intelligence. By using Sprites 
some very impressive graphics programs can be implemented 
using fairly short BASIC routines. The price that you have 
to pay for this intelligence is that, for each Sprite, a lot of 
setting up needs to be done before the Sprite can be used. 

the data for any particular Sprite is 63 
bytes long, which means that a block of at least 63 bytes 
of memory is required to store it. However, for a computer, 
the number 64 is much more convenient (64 = 2*). For this 
reason the VIC chip assumes that each Sprite's data occupies 
a 64 byte block of memory. (The last byte is not used.) 
When the VIC chip wants to know where a given Sprite's 
data is located it muhiplies the value in the appropriate 
Sprite Data Pointer by 64 to find the address of the first 
byte of Sprite data. 

For example, if register 2040 contained 14, then the VIC 
chip would look at memory location 896 for the start of 
Sprite O's data (14*64 = 896). 

From this we can work out the range of memory locations 
which can be used for storing Sprite data. Each Sprite Data 
Pointer can point to 256 different locations and each Sprite 
requires 64 bytes of memory for its data storage. So the 
range of locations which could be used is given by 256*64 = 
16384. In other words Sprite data can only be stored in the 
first 16K of memory. 

Within this range of memory locations (0 to 16383 
decimal) there are many locations which cannot be used for 
Sprite data storage. In fact, there are only two available areas 
which can be used, these are:- 

1. The Cassette I/O buffer. (828 decimal to 1023 decimal.) 
This is used by the cassette recorder during LOAD, SAVE, 
PRINT* and INPUT* operations. Provided that the cassette 
recorder is not being used, you can fit the data for three 
Sprites' in here. 

2. The BASIC text area. (2048 decimal to 40959 deci- 
mal.) This is, of course, fully used by the BASIC program. 
It is possible however, to move the start of the BASIC text 
area up a few bytes to release some space for Sprite data. 
This can be done by typing the following lines in direct 
mode. (You can't RUN this as a program because as soon as 
you start to move the bottom of BASIC you will loose the 
program!!) 






C64: Moving Sprites Around 

We said at the beginning of this chapter that one of the main 
advantages of Sprites was the ease with which they could be 
moved around the screen. This has been achieved on the 
Commodore 64 by allocating a pair of registers, called the 
Sprite Position registers, for each Sprite. These registers hold 
the current position of the top left hand corner dot of the 
Sprite on the 320 by 200 dots high resolution screen. 

The VIC chip, which is constantly redrawing the display, 
looks at the Sprite Position registers to find out where the 
Sprites should be. POKEing new values into one of these 
register pairs will cause the V(C chip to move the Sprite 
from its old position to the new one. Figure 6.6 shows the 
location of the Sprite position registers. 

As we said earlier, the Sprite Position registers hold the 
location of each Sprite on the high resolution screen. How- 
ever, for Sprite positioning purposes, the high resolution 
screen is not numbered in the way you might expect. Instead 
of being numbered from to 319 in the X direction and 
to 199 in the Y direction, the screen is actually numbered 
from 24 to 344 in the X direction and from 50 to 250 in the 
Y direction. The reason for this is that it allows Sprites to be 
smoothly moved on and off the screen without needing nega- 
tive position coordinates (which the system cannot deal with). 
For example, a Sprite positioned at 12,50 will be fully on 
screen in the Y direction and half on screen in the X direction. 
And a Sprite positioned at 0,0 will be completely off screen 
in both directions. 

In addition, a problem occurs when using large values of X. 
This is because the X Sprite Position registers can only hold 
numbers in the range to 255, and this is not enough to 
completely address the 320 dots wide screen. This has been 
overcome by using an extra register to provide each of the 
X Sprite Position registers with an extra high bh, thus making 
them all 9 bits wide. (A 9 bit register can hold numbers in 
the range to 511.) This additional register is called the 
Most Significant Bit X register (MSBX for short) and it is 
located at address 53264 decimal. As with other bit-wise 
registers, bit is the extra bit for Sprite O's Sprite Position 
X register, bit 1 is for Sprue 1 , and so on. 

This does make life a little bit more difficuh, because we 
now have to check every X coordinate to see if it is larger 
or smaller than 255. 

If it is larger than 255 we must set the appropriate extra 
bit, subtract 256 from the X coordinate, and store the re- 
mainder in the appropriate Sprite Position X register. 

If it is smaller than 255 we must reset the appropriate extra bit and store the whole X coordinate in the appropriate 
Sprite Position X register. 

The following BASIC subroutine will set up the Sprite 
Position registers correctly, regardless of the size of the X 
coordinate. Before calling this routine, the Sprite number 
must be placed in the SN variable, and the X,Y coordinate 
must be placed in the X and Y variables. 





 Bigger Sprites on the C64

Having all the Sprite screens the same size can be a bit re- 
stricting. Sometimes you may want a Sprite to be a bit higher 
or wider than normal to fit in with the scale of the background, 
This can be accomplished, to a degree, by using the Sprite 
Expansion facility. 

Sprites can be doubled in size, in both the X and the Y 
directions, by setting the appropriate bits in the X and/or 
Y Sprite Expansion registers. These registers are located 
at addresses 53277 decimal for the X Expansion register 
and 53271 decimal for the Y Expansion register. Within 
each register, bit controls Sprite 0, bit 1 controls Sprite 1, 
and so on. If the expansion bit is a I then that Sprite is 
doubled in size in the appropriate direction. 

For example, to display Sprite 3 expanded in the X direc- 
tion, we must use the following POKE:- 

POKE 53277, PEEK (53277) OR 8 

What actually happens is that with expand on, every dot 
on the Sprite screen is expanded to overlay two dots on the 
high resolution screen. The resolution of the Sprite does 
not change, it is still 24 x 21 dots, but it now overlays a 
48 X 42 dots area of the high resolution screen. 

Getting Your Priorities Right 

As we said at the beginning of this chapter, one of the most 
powerful facilities of Sprites is their ability to be assigned 
priorities. Sprite priority determines which Sprite will appear 
in front when two Sprites overlay each other, and whether a 
Sprite will appear to be in front of or behind the background. 

The Sprite to Sprite priorities are built in to the system 
and cannot be changed. Sprite has the highest priority, 
i.e. no other Sprite can appear to be in front of it. Sprite 1 
has the next highest priority, i.e. it will pass behind Sprite 
but in front of all the others. The other Sprite priorities 
follow the same pattern. This means that you need to bear 
the Sprite priorities in mind when deciding which Sprite to 
use for each character. 

The Sprite to background priorities can be individually 
selected for each Sprite. This can be done by setting the 
appropriate bit in the Sprite Background Priority register 
whicli is located at address 53275 decimal. Each bit con- 
trols one Sprite, bit controls Sprite 0, bit 1 controls Sprite 
1, and so on. If the appropriate bit is a then that Sprite 
will appear to pass in front of all background graphics. If it 
is a 1 then that Sprite will appear to pass behind all back- 
ground graphics. 

For example, to make Sprite 4 pass behind the back- 
ground graphics, we must use the following POKE:- 

POKE 53275, PEEK (53275) OR 16 





Sprite collisions on the C64
collision detection using standard graphics can be a lengthy 
and difficult process. By using Sprites however, any number 
of collisions can be detected simply by PEEKing a pair of 
registers. 

Not surprisingly, it is the VIC chip which actually detects 
that a collision has occurred, and it reports the fact to us via 
two collision registers. One of these registers is used for 
Sprite to Sprite collisions and the other is used for Sprite to 
background collisions. Figure 6.7 shows the locations of 

Just before we look at the way in which these registers 
are used, we need to define exactly what we mean by a 
collision. 

A Sprite to Sprite collision has occurred when a non- 
transparent area of one Sprite overlays a non-transparent 
area of another Sprite. 

A Sprite to background coUision has occurred when a 
non-transparent area of a Sprite overlays any background 
graphics. 

This means that for missile/target type applications, the 
collision will not occur until the missile actually hits the 
target, regardless of the way the missOe has been drawn on 
the Sprite screen. 

Now back to the collision registers ... In each register 
bit refers to Sprite 0, bit 1 refers to Spiite 1, and so on. 
Both registers are normally set to 0, and the VIC chip sets the 
appropriate bits to 1 for those Sprites which have collided. 

For example, if Sprite has collided with Sprite 4, then 
the Sprite to Sprite Collision register will contain 17 decimal 
(bits and 4 set). 

Or, if Sprite 5 has collided with the background, then the 
Sprite to Background Collision register will contain 32 decimal 
(bit 5 set). 

At first sight the collision registers seem quite difficult 
to use, because the numbers which they return don't immedi- 
ately relate to individual Sprites. The problem can be easily 
resolved by PEEKing the registers in the right way.






THE HIGH RESOLUTION SCREEN of the C64

The Commodore 64's higii resolution screen is something of 
an enigma, because the User Manual tells you absolutely 
nothing about it! In fairness to Commodore however, this 
may be because the high resolution screen is not an easy 
facility to learn to use, the User Manual is aimed at a very 
basic level. 

So, in this chapter we will remedy these omissions by 
explaining what the high resolution screen is, where it can be 
located and how you can use it. We have also included many 
short subroutines that will help you to drive the high resolu- 
tion facilities. 





C64 High Resolutions? 

The first thing we should take a look at is a definition for 
the term high resolution. Well, in the computer world the 
term resolution refers to the number of points on the screen 
which can be individually addressed, 

A low resolution screen is a screen which has a small 
number of individually addressable points. The normai text 
screen is a low resolution screen because it only has 1000 
individual points (40 columns by 25 rows). 

Conversely, a high resolution screen is a screen which has 
a large number of individually addressable points. A screen 
is usually termed high resolution if it has more than 40000 
individual points. The Commodore 64s' screen is 320 dots 
wide by 200 dots high giving 64000 individual points. 

So that we can individually address each of these 64000 
dots they are bit mapped into RAM. This means that each 
of the dots on the screen is controlled by a bit in memory, 
if the bit is a 1 then that dot will be lit, if the bit is a then 
the dot will not be lit. From this we can work out how much memory will be 
needed to store the high resolution screen. As we have seen 
there are 64000 dots on the screen and each byte in RAM 
can control 8 dots (8 bits in a byte), so we will need 8000 
bytes to completely store the screen,






Locating the Screen in RAM on the C64

In the 64K of RAM available tliere are 8 different places 
where the high resolution screen could be located (65536/ 
8000 = 8,192). However, in the standard system using 
BASIC, only the first two of the eight possible locations 
can be used. (This is because it is the Video Interface Con- 
troller chip (or ViC chip for short) which controls the high 
resolution screen, and in the standard system the VIC chip 
can only see the first I6K of RAM.) 

The two locations which we can use for the high resolution 
screen start at addresses and 8192 decimal, (The number 
8192 is used because it is 2" which a computer finds more 
convenient than the number 8000.) Unfortunately, the 
operating system uses most of the low memory locations, 
so the only available place to locate the high resolution screen 
is at address 8192 to 16192, 

You've probably noticed that this falls right in the middle 
of the BASIC text area, so in order to prevent BASIC from 
overwriting the screen, we must move the bottom of BASIC 
up past address 16193 decimal. As we saw in Chapter 6 
this is not too difficult, and the following lines, which must 
be entered in direct mode, will move the bottom of BASIC 
up to address 16384 decimal. (This is the closest we can 
get to 16193 because the bottom of BASIC can only be 
moved in 256 byte blocks.) 

The result of moving BASIC by this amount is that we 
have lost 14K of program space even though the screen only 
takes up 8K. it is now possible however, to store the data 
for 32 Sprites in the space between address 2048 decimal 
and 4096 decimal. (It is not possible to put Sprite data 
between addresses 4096. decimal and 8192 decimal because 
the VIC chip maintains an image of the character set ROM in 
this area.) 

As we mentioned earlier, it is the VIC chip which con- 
trols the high resolution screen, and to find out where the 
screen is located it looks at bit 3 of the VIC Memory Control 
register which is located at address 53272 decimal. 

If this bit is then the screen starts at address 0000, if 
the bit is I then the screen starts at address 8192 decimal. 
This means that when we are using BASIC we must always 
set this bit. 

For example, to locate the high resolution scrren at address 
8192 decimal POKE: POKE 53272, PEEK (53272) OR 8. 

All we need to do now is to tell the VIC chip to switch 
to high resolution mode. This can be done by setting bit 5 
of the VIC Control register which is located at address 53265 
decimal. If this bit is a 1 then the screen is in high resolution 
mode, if it is a then it is in normal text mode. 

For example, to switch to high resolution mode we must 
use the following POKE: POKE 53265 , PEEK (53265) OR 32. 

(Chapter 10 contains a machine code routine which locates 
the high resolution screen at address 8192 and switches to 
high resolution mode.) 

The VIC chip will now stop displaying the normal text 
screen and will begin displaying the high resolution screen. 
This introduces an immediate problem because you can no 
longer see what you are typing! If you are fairly careful 
though, you shouldn't have any problems. 

The screen itself will probably be full of garbage, and this 
comes from two sources. Firstly, memory locations 8192 
decimal to 16192 decimal are probably full of rubbish and 
this will be displayed as red dots on a black background. In 
addition, any characters that were being displayed on the 
normal text screen are now displayed as different coloured 
dots. This happens because the normal text screen memory 
is now used to store the colour information for the high 
resolution screen (more about this later). 

Obviously before we can begin using the screen we must 
clear out this rubbish. The coloured squares can easily be 
removed by printing a clear screen character (SHIFT/CLR) 
although they will reappear if you type anything on the 
keyboard. 




Screen Organisation and Use on the C64

As we have already mentioned, the high resolution screen is 
320 dots wide by 200 dots high. The obvious way to number 
the screen would be to have the top left corner as 0,0 and 
then number the X direction from to 319 and the Y direc- 
tion from to 199. Figure 7.1 shows this logical screen 
numbering. 

Unfortunately, the high resolution screen memory isn't 
organised in this way. Figure 7.2 shows the physical screen 
numbering. 

Obviously the logical numbering system is the one which 
we want to be using for drawing on the high resolution screen. 
This means that we will need a conversion routine to con- 
vert from the logical numbering system to the physical screen 
organisation.




Using Colour on C64

As we mentioned earlier, the colour information for the high 
resolution screen comes from the normal text screen area, 
which is located at address 1024 decimal to 2023 decimal. 
Each text screen location holds the colour information for an 
8 by 8 dots square on the high resolution screen. The byte 
at address 1024 decimal holds the colour information for 
bytes to 7 of the high resolution screen, the byte at address 
1025 decimal holds the colour information for bytes 8 to 15 
of the high resolution screen, and so on. (See Figure 7.2.) 

Within each colour byte the four higli order bits (bits 4 to 
7) contain the colour for any bit on the high resolution 
screen which is set to a 1 and the four low order bits (bits 
to 3) contain the colour for any bit on the h^h resolution 
screen which is reset to 0. 

This means of course, that the colour memory has a much 
lower resolution than the screen memory, so you can only 
colour the screen in blocks of 64 bits. 

Just as with Sprite colours, the high resolution screen can 
operate in two colour modes.





Standard colour mode of the C64

In this mode any dot on the high resolution screen can 
only be in one of two colours. These colours are simply 
taken from the high and low bits of the text screen memory 
as described above. Usually the whole high resolution screen 
will be in the same two colours, which means that the com- 
posite value of the colour can be written all through the text 
screen memory. 




xtended colour mode on C64

In this mode you sacrifice horizontal resolution for an 
Increased number of colours. Instead of every dot being in 
one of two colours, the horizontal dots are now read in pairs 
so that each pair of dots can be in one of four colours. Figure 
7.3 shows how the dot pairs are code into colours. 





on C64:The Background colour register is located at address 

53281 decimal and it normally holds the text screen back- 
ground colour. The colour in this register is the same for the 
whole of the high resolution screen, i.e. the high resolution 
screen background must all be the same colour. 

The normal colour memory, which is located at address 

55296 decimal to 56295 decimal, is where the colour for the 
characters on the text screen is normally held. In extended 
colour mode each location can be used to hold the colour 
for an 8 by 8 dots square on the high resolution screen. 

For example, location 55296 holds the colour for any dot 
pairs set to 1 1 in bytes to 7 of the high resolution screen, 

55297 holds the colour for any dot pairs set to 11 in bytes 
8 to 15, and so on. 

To select extended colour mode for the high resolution 
screen you must set bit 4 of the second VIC control register 
which is located at address 53270 decimal. For example, to 
select extended colour mode for the high resoiution screen 
you must use the following POKE: POKE 53270, PEEK 
(53270) OR 16. 





Drawing Complex Shapes on the C64

By using the BASIC PLOT and LINEDRAW routines des- 
cribed above, or the much faster machine code routines 
described in Chapter 10, it is jrossibie to draw almost any 
complex shape. 

All that is required is a coordinate file which holds all 
the necessary drawing coordinates and status information 
such as skip to the next point and end of file. The easiest 
way to store this sort of data is in BASIC DATA statements. 

We can store the X,y coordinates as simple pairs of 
numbers in the range 0â€”319 for the X coordinate and 0â€”199 
for the Y coordinate. For the status information we can use 
â€” 1 to indicate skip to the next point and â€”2 to indicate the 
end of the file. 





SOUND on C64

Computer generated sound and music is nothing new. every 
time you turn on a radio you can hear some excellent 
examples of it. Not until fairly recently however, have home 
computers been able to generate high quality sound with any 
degree of control. The sound generator chip fitted to the 
Commodore 64 is one of the most flexible devices currently 
available, and it can be used to produce a wide variety of 
sounds. From a programmers point of view however, this 
extra flexibility can mean extra complexity, because there 
are a large number of parameters which must be specified to 
produce even the simplest of sounds. 





An Outline of the Commodore Sound System 

The Commodore 64 sound system is controlled by the Sound 
Interface Device, or SID chip for short. Internally it contains 
three completely separate sound sources called voices. Figure 
8.1 shows how the three voices are organised. 

Each of the voices can generate four different waveforms 
over the frequency range to 4000 Hz. Each waveform has a 
different wave shape and produces different harmonics. The 
four waveforms are, Triangular, Sawtooth, Rectangular and 
White noise. Figure 8.2 shows the general shape of each of 
these waveforms. 

The envelope shapers control the shape of the sound by 
applying user specified values for the sustain level and the 
attack, decay and release rates (called the ADSR envelope). 
Figure 8.3. shows a typical ADSR envelope. 

The outputs of the three envelope shapers are then brought 
together and fed into the tone filtering stage. Filtering is 
used to remove unwanted frequencies from the sound (mainly 
used for specific sound effects). There are three types of 
filter available, a High pass filter which rejects frequencies 
below the cutoff, a Low pass filter which rejects frequencies 
above the cutoff and a Band pass filter which rejects fre- 
quencies both above and below the cutoff.



C64 SID Perfect Pitch? 
on C64:
Selecting the correct frequency for a sound is obviously much 
more important for music than is for sound effects. For- 
tunately, the system allows very precise control over the 
frequency so that musical notes can be accurately pitched. 
This fine control is achieved by using a 16 bit value to specify 
the frequency value. Naturally, two registers are needed to 
hold this 16 bit value, these are the High Frequency Control 
register and the Low Frequency Control register. Figure 8.9 
shows where these registers are located for each of the three 
voices. 

Each of the waveform generators can output frequencies 
in the range to 4000 Hz. Within this range of frequencies 
lies a fuU 8 octaves of the musical scale. (About the same 
as a piano, which has a range of 7.5 octaves.) Appendix M 
in the User Manual gives a complete list of the high and low 
frequency values which must be POKE'd into the Frequency 
Control registers to produce the standard musical scale. 



Sound Effects on C64

There are a couple of additional facilities in the SID chip 
which are very useful when generating sound effects. 
(Although they can also be used in music.) 

The first of these is Dynamic Frequency Variation. This 
is achieved by making the output of one of the waveform 
generators dependant upon the output of one of the others.
To make this as simple as possible, waveform generator 3 
has a special digital output which produces a digitised version 
of the wave being generated. 

For example, if a sawtooth wave is being generated then 
the digital output varies from to 255 decimal in sympathy 
with the sawtooth wave. This value can then be used to 
influence the frequency value for one of the other generators. 

This digital output is only available from waveform genera- 
tor 3 and it is located at address 54299 decimal. In addition, 
should you not want the output of generator 3 to be audible 
whilst you are using its digital output, bit 7 of the Filter 
Mode Control register will cut off generator 3's output when it 
is set to 1 . (See Figure 8.1 5.) 

The next special facility' is called Synchronisation and it 
involves the combination of the outputs of two waveform 
generators using the logical AND function. This can be used 
to provide a whole range of very interesting sounds, parti- 
cularly if one of the voices is generating vi'hite noise. 

The synchronisation facility is available on alt the voices 
and it is controlled by bit 1 of the Voice Control register. 
Figure 8.17 shows which waveform generators are syn- 
chronised by each Voice Control register. 





SYS and USR on C64

There are several ways to use machine code routines from 
BASIC on tile Commodore 64, the two most useful of these 
being to use the keywords SYS or USR. 

The BASIC statement SYS xxxxx causes the BASIC inter- 
preter to execute a call to a machine code subroutine at 
address xxxxx where xxxxx is a decimal number in the range 
- 65535. To return to BASIC, the machine code sub- 
routine must end with a return from subroutine instruction 
(RTS). If the SYS statement is encountered in a BASIC 
program then control will be passed back to the next state- 
ment in the program after the SYS statement. If the SYS 
statement is encountered in direct mode then control will be 
passed to direct mode. 

If machine code subroutines need to have parameters 
passed to them and returned by them then this can be 
achieved using the BASIC PEEK and POKE facEities to place 
data in known locations in memory that the machine code 
can access using the machine code equivalents to PEEK and 
POKE. 

The SYS statement is the easiest way of accessing machine 
code routines from BASIC as there can be any number of SYS 
statements in a program each of which contains the address ' 
of the routine it is to call. This means that many separate 
routines can be accessed from within a single program with 
ease. 

The other common way to access machine code routines 
from BASIC is to use the BASIC function USR{X). The USR 
function is more difficult to use than the SYS system but it 
does have advantages under certain circumstances. The main 
advantage of USR over SYS is that USR allows a single para- 
meter to be passed to the machine code subroutine and it 
allows the routine to pass a single parameter back as an 
answer. It is the fact that USR returns a value that maices it 
a function.