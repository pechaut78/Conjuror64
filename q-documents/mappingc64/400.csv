question,answer
"What is the purpose of the memory location at address $D018?","address              $D018          VMCSB
VIC-II Chip Memory Control Register

Bit 0:  Unused
Bits 1-3:  Text character dot-data base address within VIC-II address
  space
Bits 4-7:  Video matrix base address within VIC-II address space

This register affects virtually all graphics operations.  It
determines the vase address of two very important data areas, the
Video Matrix, and the Character Dot-Data area.

Bits 1-3.  These bits are used to set the location of the Character
Dot-Data area.  This area is where the data is stored (for more
information on character shape data, see the alternate entry for
location 53248 ($D000), the Character Generator ROM).

Bits 1-3 can represent any even number from 0 to 14.  That numer
stands for the even 1K offset of the character data area from the
beginning of VIC-II memory.  For example, if these bits are all set to
0, it means that the character memory occupies the first 2K of VIC-II
memory.  If they equal 2, the data area starts 2*1K (2*1024) or 2048
bytes from the beginning of VIC memory.

The default value of this nybble is 4.  This sets the address of the
Character Dot-Data area to 4096 ($1000), which is the starting address
of where the VIC-II chip addresses the Character ROM.  The normal
character set which contains uppercase and graphics occupies the first
2K of that ROM.  The alternate character set which contains both
upper- and lowercase letters use the second 2K.  Therefore, to shift
to the alternate character set, you must change the value of this
nybble to 6, with a POKE 53272,PEEK(53272)OR2.  To change it back,
POKE 53272,PEEK(53272)AND253.

In bitmap mode, the lower nybble controls the location of the bitmap
screen data.  Since this data area can start only at an offset of 0 or
8K from the beginning of VIC-II memory, only Bit 3 of the Memory
Control Register is significant in bitmap mode.  If Bit 3 holds a 0,
the offset is 0, and if it holds a 1, the offset is 8192 (8K).

Bits 4-7.  This nybble determines the starting address of the Video
Matrix area.  This is the 1024-byte area of memory which contains the
screen codes for the text characters that are displayed on the screen.
In addition, the last eight bytes of this area are used as pointers
which designate which 64- byte block of VIC-II memory will be used as
shape data for each sprite.

These four bits can represent numbers from 0 to 15.  These numbers
stand for the offset (in 1K increments) from the beginning of VIC-II
memory to the Video Matrix.

For example, the default bit pattern is 0001.  This indicates that the
Video Matrix is offset by 1K from the beginning of VIC-II memory, the
normal starting place for screen memory.  Remember, though, the bit
value of this number will be 16 times what the bit pattern indicates,
because we are dealing with Bits 4-7.  Therefore, the 0001 in the
upper nybble has a value of 16.

Using this register, we can move the start of screen memory to any 1K
boundary within the 16K VIC-II memory area.  Just changing this
register, however, is not enough if you want to use the BASIC line
editor.  The editor looks to location 648 ($288) to determine where to
print screen characters.

If you just change the location of the Video Matrix without changing
the value in 648, BASIC will continue to print characters in the
memory area starting at 1024, even though that area is no longer being
displayed.  The result is that you will not be able to see anything
that you type in on the keyboard.  To fix this, you must POKE 648 with
the page number of the starting address of screen memory (page
number=location/256).  Remember, the actual starting address of screen
memory depends not only on the offset from the beginning of VIC-II
memory in the register, but also on which bank of 16K is used for
VIC-II memory.

For example, if the screen area starts 1024 bytes from the beginning
of VIC- II memory, and the video chip is using Bank 2 (32768-49151),
the actual starting address of screen memory is 32768+1024=33792
($8400).  For examples of how to change the video memory area, and of
how to relocate the screen, see the entro for 56576 ($DD00).

53273         $D019          VICIRQ
VIC Interrupt Flag Register

Bit 0:  Flag:  Is the Raster Compare a possible source of an IRQ?
        (1=yes)
Bit 1:  Flag:  Is a collision between a sprite and the normal graphics
        display a possible source of an IRQ?  (1=yes)
Bit 2:  Flag:  Is a collision between two sprites a possible source of
        an IRQ?  (1=yes)
Bit 3:  Flag:  Is the light pen trigger a possible source of an IRQ?
        (1=yes)
Bits 4-6:  Not used
Bit 7:  Flag:  Is there any VIC-II chip IRQ source which could cause
        an IRQ?  (1=yes)

The VIC-II chip is capable of generating a maskable request (IRQ) when
certain conditions relating to the video display are fulfilled.
Briefly, the conditions that can cause a VIC-II chip IRQ are:

1.  The line number of the current screen line being scanned by the
raster is the same as the line number value written to the Raster
Register (53266, $D012).

2.  A sprite is positioned at the same location where normal graphics
data are being displayed.

3.  Two sprites are positioned so that they are touching.

4.  The light sensor on the light pen has been struck by the raster
beam, causing the fire button switch on joystick Control Port #1 to
close (pressing the joystick fire button can have the same effect).

When one of these conditions is met, the corresponding bit in this
status register is set to 1 and latched.  That means that as long as
the corresponding enable bit in the VIC IRQ Mask register is set to 1,
and IRQ requested will be generated, and any subsequent fulfillment of
the same condition will be ignored until the latch is cleared.

This allows you to preserve multiple interrupt requests if more than
one of the interrupt conditions is met at a time.  In order to keep an
IRQ source from generating another request after it has been serviced,
and to enable subsequent interrupt conditions to be detected, the
interrupt service routine must write a 1 to the corresponding bit.
This will clear the latch for that bit.  The default value written to
this register is 15, which clears all interrupts.

There is only 1 IRQ vector that points to the address of the routine
that will be executed when an IRQ interrupt occurs.  The same routine
will therefore be executed regardless of the source of the interrupt.
This status register provides a method for that routine to check what
the source of the IRQ was, so that the routine can take appropriate
action.  First, the routine can check Bit 7.  Anytime that any of the
other bits in the status register is set to 1, Bit 7 will also be set.
Therefore, if that bit holds a 1, you know that the VIC-II chip
requested an IRQ (the two CIA chips which are the other sources of IRQ
interrupts can be checked in a similar manner).  Once it has been
determined that the VIC chip is responsible for the IRQ, the
individual bits can be tested to see which of the IRQ conditions have
been met.

For more information, and a sample VIC IRQ program, see the following
entry.

5"